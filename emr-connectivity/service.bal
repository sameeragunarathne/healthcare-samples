import ballerina/http;
import ballerina/log;
import ballerinax/health.clients.fhir;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhir.r4.international401 as international;
import ballerinax/health.fhir.r4.parser as fhirParser;
import ballerina/io;


// Configurations for Cerner FHIR Server. Refer to the Config.toml file to set these configurations.
configurable string cernerFhirServerUrl = ?;
configurable string cernerTokenUrl = ?;
configurable string cernerClientId = ?;
configurable string cernerClientSecret = ?;
configurable string[] scopes = ?;

fhir:FHIRConnectorConfig cernerConfig = {
    baseURL: cernerFhirServerUrl,
    mimeType: fhir:FHIR_JSON,
    authConfig: {
        tokenUrl: cernerTokenUrl,
        clientId: cernerClientId,
        clientSecret: cernerClientSecret,
        scopes: scopes
    }
};

final fhir:FHIRConnector cernerConnector = check new (cernerConfig);

service http:Service / on new http:Listener(9090) {

    // Get patient by Member Record Number (MRN)
    isolated resource function get patient(string mrn) returns http:Response|http:ClientError|error {
        map<string[]> queryParams = {"identifier": [mrn]};
        fhir:FHIRResponse|fhir:FHIRError response = cernerConnector->search("Patient", queryParams);
        if response is fhir:FHIRResponse {
            // parse the response to FHIR Bundle received from Cerner
            r4:Bundle bundle = check fhirParser:parse(response.'resource).ensureType(r4:Bundle);
            io:print("Response Bundle returned: ", bundle.toJson());
            r4:BundleEntry[]? entry = bundle.entry;
            if entry is r4:BundleEntry[] {
                anydata responseResult = entry[0]?.'resource;
                // transform the FHIR Patient to Custom Patient Data
                CustomPatientData customPatientPayload = transformToCustomPatient(check responseResult.cloneWithType(international:Patient));
                http:Response resp = new;
                resp.setJsonPayload(customPatientPayload.toJson());
                return resp;
            }
            return r4:createFHIRError("Error occured while processing response.", r4:CODE_SEVERITY_ERROR, r4:TRANSIENT_EXCEPTION);
        } else {
            log:printError("Error occurred while retrieving the response from Cerner.");
            return r4:createFHIRError("Error occurred while retrieving the response from Cerner.", r4:CODE_SEVERITY_ERROR,
                    r4:TRANSIENT_EXCEPTION, cause = response);
        }
    }

    // Create Patient in EMR
    isolated resource function post patient(@http:Payload CustomPatientData patient) returns http:Response|http:ClientError|error {
        io:println("Patient: ", transformToFhirPatient(patient).toJson());
        fhir:FHIRResponse|fhir:FHIRError response = cernerConnector->create(transformToFhirPatient(patient).toJson(), returnPreference = fhir:MINIMAL);
        if response is fhir:FHIRResponse {
            http:Response resp = new;
            resp.statusCode = 201;
            return resp;
        }
        log:printError("Error occurred while retrieving the response from Epic.");
        return r4:createFHIRError("Error occurred while retrieving the response from Epic.", r4:CODE_SEVERITY_ERROR,
                r4:TRANSIENT_EXCEPTION);
    }

}

// Record structure to hold proprietary patient data structure used in a health system. 
// This record is generated by providing the sample patient data payload from the ballerina data mapper UI.
type CustomPatientData record {
    string patient_id?;
    string first_name?;
    string last_name?;
    string date_of_birth?;
    string gender?;
    record {
        string phone?;
        string email?;
        Address address?;
    } contact_information?;
    record {
        string name;
        string relationship;
        string phone;
    } emergency_contact?;
    record {
        string provider;
        string policy_number;
        string group_number;
    } insurance_information?;
    record {
        string condition;
        string diagnosis_date;
        string notes;
    }[] medical_history?;
    record {
        string name;
        string dosage;
        string frequency;
    }[] current_medications?;
    record {
        string substance;
        string reaction;
    }[] allergies?;
    record {
        string test;
        (record {
            string total_cholesterol;
            string hdl;
            string ldl;
            string triglycerides;
        }|string) result;
        string date;
    }[] lab_results?;
    record {
        string date;
        string time;
        string provider;
        string reason;
    }[] appointments?;
};

type Address record {
    string street;
    string city;
    string state;
    string zip;
};

// Data Mapper Function to transform FHIR Patient to Custom Patient Data
isolated function transformToCustomPatient(international:Patient patient) returns CustomPatientData => {
    patient_id: patient.id,
    gender: patient.gender,
    first_name: extractedFirstName(patient.name),
    last_name: extractedLastName(patient.name),
    date_of_birth: patient.birthDate,
    contact_information: {
        address: extractedAddress(patient.address)
    }
};

// Data Mapper Function to transform Custom Patient Data to FHIR Patient
isolated function transformToFhirPatient(CustomPatientData patientData) returns international:Patient => {
    name: [
        {
            use: r4:official,
            family: patientData.last_name,
            given: [
                <string>patientData.first_name
            ]
        }
    ],
    birthDate: patientData.date_of_birth,
    gender: <international:PatientGender?>patientData.gender,
    identifier: [
        {
            assigner: {
                reference: "Organization/675844"
            }
        }
    ],
    telecom: [
        {
            value: patientData.contact_information?.phone,
            use: r4:mobile,
            system: r4:phone
        },
        {
            value: patientData.contact_information?.email,
            use: r4:work,
            system: r4:email
        }
    ],
    address: [
        {
            use: r4:home,
            city: patientData.contact_information?.address?.city,
            state: patientData.contact_information?.address?.state,
            postalCode: patientData.contact_information?.address?.zip,
            line: [
                <string>patientData.contact_information?.address?.street
            ]
        }
    ]
};

isolated function extractedAddress(r4:Address[]? address) returns Address? {
    if address is r4:Address[] {
        string[]? line = address[0].line;
        if line is string[] {
            return {
                street: line[0],
                city: <string>address[0].city,
                state: <string>address[0].state,
                zip: <string>address[0].postalCode
            };
        }
    }
    return ();
}

isolated function extractedFirstName(r4:HumanName[]? name) returns string? {
    if name is r4:HumanName[] {
        string[]? givenNames = name[0].given;
        if givenNames is string[] {
            return givenNames[0];
        }
    }
    return ();
}

isolated function extractedLastName(r4:HumanName[]? name) returns string? {
    if name is r4:HumanName[] {
        return name[0].family;
    }
    return ();
}

